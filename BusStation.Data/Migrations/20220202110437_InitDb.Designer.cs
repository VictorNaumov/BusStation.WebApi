// <auto-generated />
using System;
using BusStation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BusStation.Data.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220202110437_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusStation.Data.DataTransferObjects.AdminAccount.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BusStation.Data.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("Driver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("BusStation.Data.Models.BusStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BusStops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "Novopolotsk",
                            Name = "Bus station"
                        },
                        new
                        {
                            Id = 2,
                            Location = "Novopolotsk",
                            Name = "Shopping centre"
                        },
                        new
                        {
                            Id = 3,
                            Location = "Novopolotsk",
                            Name = "Slobodskaya"
                        },
                        new
                        {
                            Id = 4,
                            Location = "Novopolotsk",
                            Name = "Gaidara"
                        },
                        new
                        {
                            Id = 5,
                            Location = "Novopolotsk",
                            Name = "The First Tent"
                        },
                        new
                        {
                            Id = 6,
                            Location = "Novopolotsk",
                            Name = "Golden Field"
                        },
                        new
                        {
                            Id = 7,
                            Location = "Novopolotsk",
                            Name = "Cosmos Cinema"
                        },
                        new
                        {
                            Id = 8,
                            Location = "Novopolotsk",
                            Name = "Youth"
                        },
                        new
                        {
                            Id = 9,
                            Location = "Novopolotsk",
                            Name = "Komsomolskaya"
                        },
                        new
                        {
                            Id = 10,
                            Location = "Novopolotsk",
                            Name = "Music School"
                        },
                        new
                        {
                            Id = 11,
                            Location = "Novopolotsk",
                            Name = "Cinema Minsk"
                        },
                        new
                        {
                            Id = 12,
                            Location = "Novopolotsk",
                            Name = "Naftan Hotel"
                        },
                        new
                        {
                            Id = 13,
                            Location = "Novopolotsk",
                            Name = "Factory Meter"
                        },
                        new
                        {
                            Id = 14,
                            Location = "Novopolotsk",
                            Name = "Podcastels"
                        },
                        new
                        {
                            Id = 15,
                            Location = "Novopolotsk",
                            Name = "Vasilevtsy"
                        },
                        new
                        {
                            Id = 16,
                            Location = "Novopolotsk",
                            Name = "8th Microdistrict"
                        },
                        new
                        {
                            Id = 17,
                            Location = "Novopolotsk",
                            Name = "Polimirovskaya"
                        },
                        new
                        {
                            Id = 18,
                            Location = "Novopolotsk",
                            Name = "Solar"
                        },
                        new
                        {
                            Id = 19,
                            Location = "Novopolotsk",
                            Name = "Meadow"
                        },
                        new
                        {
                            Id = 20,
                            Location = "Novopolotsk",
                            Name = "Ekiman-1"
                        },
                        new
                        {
                            Id = 21,
                            Location = "Novopolotsk",
                            Name = "Ekiman-2"
                        },
                        new
                        {
                            Id = 22,
                            Location = "Polotsk",
                            Name = "Ksta Hospital"
                        },
                        new
                        {
                            Id = 23,
                            Location = "Polotsk",
                            Name = "The Mound of Immortality"
                        },
                        new
                        {
                            Id = 24,
                            Location = "Polotsk",
                            Name = "Ekiman"
                        },
                        new
                        {
                            Id = 25,
                            Location = "Polotsk",
                            Name = "Zapolotye"
                        },
                        new
                        {
                            Id = 26,
                            Location = "Polotsk",
                            Name = "Power supply"
                        },
                        new
                        {
                            Id = 27,
                            Location = "Polotsk",
                            Name = "Sports Club"
                        },
                        new
                        {
                            Id = 28,
                            Location = "Polotsk",
                            Name = "College of Economics"
                        },
                        new
                        {
                            Id = 29,
                            Location = "Novopolotsk",
                            Name = "Hotel Belarus"
                        },
                        new
                        {
                            Id = 30,
                            Location = "Polotsk",
                            Name = "Pedagogical College"
                        },
                        new
                        {
                            Id = 31,
                            Location = "Novopolotsk",
                            Name = "Sewing Factory"
                        },
                        new
                        {
                            Id = 32,
                            Location = "Novopolotsk",
                            Name = "Printing house"
                        },
                        new
                        {
                            Id = 33,
                            Location = "Novopolotsk",
                            Name = "Suvorov"
                        },
                        new
                        {
                            Id = 34,
                            Location = "Novopolotsk",
                            Name = "Leningrad"
                        },
                        new
                        {
                            Id = 35,
                            Location = "Novopolotsk",
                            Name = "Locomotive Depot"
                        },
                        new
                        {
                            Id = 36,
                            Location = "Novopolotsk",
                            Name = "School №14"
                        },
                        new
                        {
                            Id = 37,
                            Location = "Novopolotsk",
                            Name = "Move"
                        },
                        new
                        {
                            Id = 38,
                            Location = "Novopolotsk",
                            Name = "Tchaikovsky"
                        },
                        new
                        {
                            Id = 39,
                            Location = "Novopolotsk",
                            Name = "Griboyedov"
                        },
                        new
                        {
                            Id = 40,
                            Location = "Novopolotsk",
                            Name = "Bagramyan"
                        },
                        new
                        {
                            Id = 41,
                            Location = "Novopolotsk",
                            Name = "Kalinina"
                        },
                        new
                        {
                            Id = 42,
                            Location = "Polotsl",
                            Name = "Manege"
                        },
                        new
                        {
                            Id = 43,
                            Location = "Novopolotsk",
                            Name = "Soyuzpechat"
                        },
                        new
                        {
                            Id = 44,
                            Location = "Polotsk",
                            Name = "Fire Station"
                        },
                        new
                        {
                            Id = 45,
                            Location = "Polotsk",
                            Name = "Matrosova"
                        },
                        new
                        {
                            Id = 46,
                            Location = "Polotsk",
                            Name = "School №18"
                        },
                        new
                        {
                            Id = 47,
                            Location = "Polotsk",
                            Name = "Masherova"
                        },
                        new
                        {
                            Id = 48,
                            Location = "Polotsk",
                            Name = "Partisan"
                        },
                        new
                        {
                            Id = 49,
                            Location = "Polotsk",
                            Name = "Fleet"
                        },
                        new
                        {
                            Id = 50,
                            Location = "Novopolotsk",
                            Name = "Nevelskaya"
                        });
                });

            modelBuilder.Entity("BusStation.Data.Models.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstBusStopId")
                        .HasColumnType("int");

                    b.Property<int>("MinutesInWay")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SecondBusStopId")
                        .HasColumnType("int");

                    b.Property<int>("WaitingTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstBusStopId")
                        .IsUnique();

                    b.HasIndex("SecondBusStopId")
                        .IsUnique();

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("BusStation.Data.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RouteTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RouteTypeId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BusStation.Data.Models.RouteNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteNodes");
                });

            modelBuilder.Entity("BusStation.Data.Models.RouteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RouteTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Intercity"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Suburban"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Urban"
                        });
                });

            modelBuilder.Entity("BusStation.Data.Models.ScheduleDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleDayes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Even days"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Odd days"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Everyday"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Weekend"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Weekdays"
                        });
                });

            modelBuilder.Entity("BusStation.Data.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusId")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfMovementId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBack")
                        .HasColumnType("bit");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("DayOfMovementId");

                    b.HasIndex("RouteId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BusStation.Data.Models.Node", b =>
                {
                    b.HasOne("BusStation.Data.Models.BusStop", "FirstBusStop")
                        .WithOne()
                        .HasForeignKey("BusStation.Data.Models.Node", "FirstBusStopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusStation.Data.Models.BusStop", "SecondBusStop")
                        .WithOne()
                        .HasForeignKey("BusStation.Data.Models.Node", "SecondBusStopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstBusStop");

                    b.Navigation("SecondBusStop");
                });

            modelBuilder.Entity("BusStation.Data.Models.Route", b =>
                {
                    b.HasOne("BusStation.Data.Models.RouteType", "RouteType")
                        .WithMany()
                        .HasForeignKey("RouteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteType");
                });

            modelBuilder.Entity("BusStation.Data.Models.RouteNode", b =>
                {
                    b.HasOne("BusStation.Data.Models.Node", "Node")
                        .WithMany("RouteNodes")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusStation.Data.Models.Route", "Route")
                        .WithMany("RouteNodes")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("BusStation.Data.Models.Trip", b =>
                {
                    b.HasOne("BusStation.Data.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId");

                    b.HasOne("BusStation.Data.Models.ScheduleDay", "DayOfMovement")
                        .WithMany()
                        .HasForeignKey("DayOfMovementId");

                    b.HasOne("BusStation.Data.Models.Route", "Route")
                        .WithMany("Trips")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("DayOfMovement");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusStation.Data.DataTransferObjects.AdminAccount.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusStation.Data.DataTransferObjects.AdminAccount.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusStation.Data.DataTransferObjects.AdminAccount.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusStation.Data.DataTransferObjects.AdminAccount.Admin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusStation.Data.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("BusStation.Data.Models.Node", b =>
                {
                    b.Navigation("RouteNodes");
                });

            modelBuilder.Entity("BusStation.Data.Models.Route", b =>
                {
                    b.Navigation("RouteNodes");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
